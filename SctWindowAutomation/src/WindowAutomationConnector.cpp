/* Generated by YAKINDU Statechart Tools for Arduino v0.4.0 */

#include "WindowAutomationConnector.h"
// #include <avr/power.h>

WindowAutomationConnector::WindowAutomationConnector(WindowAutomation* statemachine) {
	this->statemachine = statemachine;
}

/*
 * Initialize the hardware.
 */
void WindowAutomationConnector::init() {
	// pinMode(LED_BUILTIN, OUTPUT);

	// The state machine has already been initialized and started before
	// this method is called. Until syncState() is called the first time
	// by the state machine, the hardware is not in sync with the state
	// machine. If the cycle period is very high (let's say >> 1s), it
	// might be better to call syncState() once manually, to get in sync
	// with the initial state of the state machine.
	// syncState();
}

/*
 * Raise state machine events before processing them in the state machine's runCycle().
 */
void WindowAutomationConnector::raiseEvents() {
	// e.g.
	// if (buttonPressed) {
	//     statemachine->raiseXYZEvent();
	// }
}

/*
 * Update the hardware depending on the state machine's state.
 */
void WindowAutomationConnector::syncState() {
	// digitalWrite(LED_BUILTIN, statemachine->get_XYZ());
}

/*
 * Optimize power consumption by turning off hardware modules that are not needed.
 */
uint8_t WindowAutomationConnector::prepareSleepMode() {
	// Some of the functions of <avr/power.h> may not be supported by the
	// actual microprocessor you are using.
	// This method is only called in case you are using an AVR hardware timer.
	// e.g.
	// power_adc_disable();
	// power_spi_disable();
	// power_timer0_disable();
	// power_timer1_disable() ;
	// power_timer2_disable() ;
	// power_timer3_disable() ;
	// power_twi_disable();
	// power_usart0_disable();
	// power_usb_disable();
	
	return SLEEP_MODE_IDLE;
}
