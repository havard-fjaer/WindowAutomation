/* Generated by YAKINDU Statechart Tools for Arduino v0.4.0 */

#ifndef WINDOWAUTOMATION_H_
#define WINDOWAUTOMATION_H_

#include "sc_types.h"
#include "StatemachineInterface.h"

/*! \file Header of the state machine 'WindowAutomation'.
*/

class WindowAutomation : public StatemachineInterface
{
	
	public:
		
		WindowAutomation();
		
		~WindowAutomation();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			main_region_StateA,
			WindowAutomation_last_state
		} WindowAutomationStates;
		
		//! Inner class for default interface scope.
		class DefaultSCI
		{
			
			public:
				
			private:
				friend class WindowAutomation;
		};
				
		
		/*! Returns an instance of the interface class 'DefaultSCI'. */
		DefaultSCI* getDefaultSCI();
		
		
		void init();
		
		void enter();
		
		void exit();
		
		void runCycle();
		
		/*!
		* Checks if the state machine is active (until 2.4.1 this method was used for states).
		* A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		*/
		sc_boolean isActive();
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		sc_boolean isFinal();
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(WindowAutomationStates state);
	
	private:
	
	
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_integer maxOrthogonalStates = 1;
		
		
		WindowAutomationStates stateConfVector[maxOrthogonalStates];
		
		sc_ushort stateConfVectorPosition;
		
		DefaultSCI iface;
		
		// prototypes of all internal functions
		
		void enseq_main_region_StateA_default();
		void enseq_main_region_default();
		void exseq_main_region_StateA();
		void exseq_main_region();
		void react_main_region_StateA();
		void react_main_region__entry_Default();
		void clearInEvents();
		void clearOutEvents();
		
};
#endif /* WINDOWAUTOMATION_H_ */
